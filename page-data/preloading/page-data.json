{"componentChunkName":"component---src-templates-docs-js","path":"/preloading","result":{"data":{"site":{"siteMetadata":{"title":"Developer","docsLocation":"https://github.com/screencloud/developer/tree/master/docs/content"}},"mdx":{"fields":{"id":"e75ca097-10c6-5cfd-932e-867f22359461","title":"Preloading","slug":"/preloading"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Preloading\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Link = makeShortcode(\"Link\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Preloading makes your app feel snappy and fast on screen.\"), mdx(\"p\", null, \"It lets the Player load your app slightly before it is visible on screen, so you have time to fetch any data or media you need in advance.\"), mdx(\"p\", null, \"Then when the Player makes your App visible, it lets you know that it's time to kick-off.\"), mdx(\"p\", null, \"This way you can make the API calls and fetch assets, but users don't miss the \\\"start\\\" of your content. It can all sit waiting, and snap into action the second the app is visible.\"), mdx(\"h2\", null, \"How to Use\"), mdx(\"p\", null, \"Carrying on from the \", mdx(Link, {\n    to: \"/get-started\",\n    mdxType: \"Link\"\n  }, \"Get Started\"), \" guide, our code looked like this:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const sc = await connectScreenCloud(testData);\\nconst refreshTime = sc.getConfig().refreshTimeSeconds * 1000;\\n\\nsetInterval(updateQuote, refreshTime);\\nupdateQuote();\\n\")), mdx(\"p\", null, \"This means we connect to ScreenCloud, then immediately start out \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"updateQuote\"), \" interval. If the Player preloads our app 20 seconds in advance, our users will miss the first few quotes.\"), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sc\"), \" object exposes a handy Promise for this. \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"sc.onAppStarted()\"), \" will resolve when your app is visible on screen, so we just move our \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"setInterval\"), \" call to wait for it.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-javascript\"\n  }, \"const sc = await connectScreenCloud(testData);\\nconst refreshTime = sc.getConfig().refreshTimeSeconds * 1000;\\n\\n// Fetch our initial data immediately.\\nupdateQuote();\\n\\n/**\\n * When app is started (i.e. visible on screen), start the timer to refresh quotes periodically.\\n */\\nsc.onAppStarted().then(() => {\\n  setInterval(updateQuote, refreshTime);\\n});\\n\")), mdx(\"p\", null, \"Done! Now we fetch the first quote in advance so that we're ready the second the user is, but we only jump to the 2nd quote when we know users have had a chance to see the first.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#how-to-use","title":"How to Use"}]},"parent":{"__typename":"File","relativePath":"preloading.mdx"},"frontmatter":{"metaTitle":null,"metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/add-to-app-store","title":"Add to App Store"}}},{"node":{"fields":{"slug":"/app-lifecycle","title":"App Lifecycle"}}},{"node":{"fields":{"slug":"/example-user-apps","title":"Example applications created by clients"}}},{"node":{"fields":{"slug":"/example-codebases","title":"Example Codebases"}}},{"node":{"fields":{"slug":"/firebase-react-app","title":"Create a ScreenCloud app using Firebase and React"}}},{"node":{"fields":{"slug":"/","title":"Develop a ScreenCloud App"}}},{"node":{"fields":{"slug":"/get-started","title":"Get Started"}}},{"node":{"fields":{"slug":"/overview","title":"Overview"}}},{"node":{"fields":{"slug":"/preloading","title":"Preloading"}}},{"node":{"fields":{"slug":"/webhooks-app","title":"Webhooks App"}}},{"node":{"fields":{"slug":"/themes","title":"Themes"}}}]}},"pageContext":{"id":"e75ca097-10c6-5cfd-932e-867f22359461"}},"staticQueryHashes":["222377516","222377516","2619113677","2619113677","3706406642","3706406642"]}